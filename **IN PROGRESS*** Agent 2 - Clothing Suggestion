#Part 1 + 2 (But there are sum problems)

import openai
client = openai.OpenAI(
    api_key="")

#prompt allows for fashion style identification and advice
chatbot_prompt = ("You are an eccentric stylist-assistant named Chatbot. You love being creative" 
    "and referring to online sources to give insightful style advice."
    "you will read through all the given keywords and format them (jump to the next line if the word is cut): [Acubi, Afro-punk, Afro-retro, All-American, Alpine, Alt Fashion, Antique, Aristocrat, Art Deco, Art Nouveau, Athleisure, Avant-garde, Aztec, Baddie, Balletcore, Barbiecore, Beach Bum, Beatnik, Biker, Black Loli, Bohemian/Boho, Bollywood, Bon chic, bon genre, Bubble Goth, Business Casual, California, Casual, Chic, Classic, Coastal Cowgirl, Coastal Grandmother, Coquette, Cosplay, Cottagecore, Country, Country Club, Cowboy/Western, Creepy Cute, Dark Academia, Dasakawa, Decora, Dieselpunk, Eclectic, Edgy, E-Girl/Boy, Emo, English, Ero-Kawaii, Equestrian, Formal, Furry, Futuristic, Gamine, Gangster, Geek chic, Glam Rock, Glamour, Goth, Gothic Lolita, Gorpcore, Grunge, Gyaru, Hadeko, Hairband, Harajuku, Heavy Metal, Hip-hop, Hippie, Hipster, House, Ivy League, Kampala Blend, Kawaii, Kodona/Ouji/Boystyle, Kowa-Kawaii, Ladylike, Light Academia, Lolita, Lunarpunk, Macabre, Mad Max, Metalhead, Military, Minimal/Minimalist, Mod, Mori Girl, Nautical, Neo Goth, Neo-Edwardian, Neo-Y2K, New Romanticism, Normcore, NuGoth, Nymphet, Old Money, Peasant, Pinup, Phat, Pop, Pop Punk, Posh, Post-apocalyptic road warrior, Power Dressing, Prairie, Preppy/Collegiate, Psychedelic, Psychobilly, Punk, Rasta, Rave/Raver, Resort, Retro, Rock, Rockabilly, Romantic, Rustic, Safari, Sapeurs, Scandinavian Minimalist, Scene, Scrumbro, Seapunk, Ska, Skate/Skater, Skandi, Sloane Ranger, Soft Girl, Softboys, Solarpunk, Southwestern, Sporty, Steampunk, Street, Surf, Techno, Techwear, Tiki Goth, Tomboy, Traditional Ethnic Styles, Trendy, Tropical, Ulzzang, Urban, Utility, Vaporwave, Varsity, Vintage/Retro, Visual Kei, VSCO Girl/Boy, Weirdcore, Y2K, Zoot Suiters,] and ask for the client's fashion style. Do NOT share/display this list with the user"
    "the client can name any, but only ONE (at a time) of following aesthetics from the keywords and, you will have to look on the internet to generate a short description of each of the named styles. Do NOT accept multiple words (user: weirdcore, goth; your answer should be, please name 1 aesthetic at a time)"
    "Each time the user names a keyword and replies with yes, they can continue naming aesthetics as they see fit."
    "the short description should look like the following example: --> athleisure: combines athletic wear with casual pieces for a sporty yet comfortable look—think leggings, sports bras, sneakers, and hoodies."
    "You must only name and analyze aesthetics and styles explicitly listed as the keywords above when the user names them. Do not create or assume any fastion styles/aesthetic that isn’t in the keywords. Suggest a similar aesthetic in the keywords if the aesthetic the user names is not in the keywords."
    "Ask the user if the description and The styles matches their aesthetic by saying Does this aesthetic match with your preferences?(ONLY THIS QUESTION)" 
    "If the user has no idea what their aesthetic is, ask them what they like to wear by asking: What do you wear on a daily basis? (ONLY THIS QUESTION) and match the user's description with your descriptions of any given aesthetic (like: comfortable joggers, and loose zipped up sweaters, running shoes --> athleisure). Then describe the aesthetic you think is associated with the users' words"
    "Let them respond with yes or no after proposing the style" 
                     )
def style_first(prompt):
    response = client.chat.completions.create(
        model="gpt-4.1",
        temperature= 0.4,
        messages=[
            {"role": "system", "content": chatbot_prompt},
            {"role": "user", "content": user_input}
        ]
    )
    return response.choices[0].message.content.strip()

def style_reccommender(file_contents, selected_styles):
    stylized_closet = []
    #compares the file_contents and the selected_styles to filter out words that do not match with the user's aesthetic
    chatbot_prompt2 = f""" O Great Stylist! You are now in charge of filtering the user's closet based on their aesthetic(s) named in "selected_styles".
    You will have to read through all the different pieces found in "file_contents" and filter out pieces that do not match with the user's aesthetic and keep the ones that do.
    For example, if the user has the "decora" style in their "selected_styles, keep colorful items like a peachy orange cardigan, but filter out bland and monotone items like black baumwolle pants.
    Do NOT invent words that are not from either "file_contents" or "selected_styles".
    items of clothing: {file_contents}
    list of aesthetics or fashion styles to respect: {selected_styles}
    Your reply should be (the pieces of clothings that MATCH with the user's aesthetic are appended to the stylized_closet list) : stylized_closet = ["item1","item2","item3",...]"""
    response = client.chat.completions.create(
        model="gpt-4.1",
        temperature= 0.3,
        messages=[
            {"role": "system", "content": chatbot_prompt2}
        ]
    )
    return response.choices[0].message.content.strip()
    
print("Chatbot: ", style_first(prompt))

lst_aesthetics = [
    "Acubi", "Afro-punk", "Afro-retro", "All-American", "Alpine", "Alt Fashion", "Antique", "Aristocrat", "Art Deco", "Art Nouveau", 
    "Athleisure", "Avant-garde", "Aztec", "Baddie", "Balletcore", "Barbiecore", "Beach Bum", "Beatnik", "Biker", "Black Loli", 
    "Bohemian/Boho", "Bollywood", "Bon chic, bon genre", "Bubble Goth", "Business Casual", "California", "Casual", "Chic", "Classic", 
    "Coastal Cowgirl", "Coastal Grandmother", "Coquette", "Cosplay", "Cottagecore", "Country", "Country Club", "Cowboy/Western", 
    "Creepy Cute", "Dark Academia", "Dasakawa", "Decora", "Dieselpunk", "Eclectic", "Edgy", "E-Girl/Boy", "Emo", "English", 
    "Ero-Kawaii", "Equestrian", "Formal", "Furry", "Futuristic", "Gamine", "Gangster", "Geek chic", "Glam Rock", "Glamour", "Goth", 
    "Gothic Lolita", "Gorpcore", "Grunge", "Gyaru", "Hadeko", "Hairband", "Harajuku", "Heavy Metal", "Hip-hop", "Hippie", "Hipster", 
    "House", "Ivy League", "Kampala Blend", "Kawaii", "Kodona/Ouji/Boystyle", "Kowa-Kawaii", "Ladylike", "Light Academia", "Lolita", 
    "Lunarpunk", "Macabre", "Mad Max", "Metalhead", "Military", "Minimal/Minimalist", "Mod", "Mori Girl", "Nautical", "Neo Goth", 
    "Neo-Edwardian", "Neo-Y2K", "New Romanticism", "Normcore", "NuGoth", "Nymphet", "Old Money", "Peasant", "Pinup", "Phat", "Pop", 
    "Pop Punk", "Posh", "Post-apocalyptic road warrior", "Power Dressing", "Prairie", "Preppy/Collegiate", "Psychedelic", 
    "Psychobilly", "Punk", "Rasta", "Rave/Raver", "Resort", "Retro", "Rock", "Rockabilly", "Romantic", "Rustic", "Safari", "Sapeurs", 
    "Scandinavian Minimalist", "Scene", "Scrumbro", "Seapunk", "Ska", "Skate/Skater", "Skandi", "Sloane Ranger", "Soft Girl", 
    "Softboys", "Solarpunk", "Southwestern", "Sporty", "Steampunk", "Street", "Surf", "Techno", "Techwear", "Tiki Goth", "Tomboy", 
    "Traditional Ethnic Styles", "Trendy", "Tropical", "Ulzzang", "Urban", "Utility", "Vaporwave", "Varsity", "Vintage/Retro", 
    "Visual Kei", "VSCO Girl/Boy", "Weirdcore", "Y2K", "Zoot Suiters"
]
selected_styles = []
last_style = None

print(lst_aesthetics)

#TROUBLESHOOTING --> SAYING YES TWICE (REPAIR IF EXTRA TIME)
# and last_style == str in lst_aesthetics

while True:
    user_input = input("You: ")
    if user_input.lower() == "yes":
        if last_style:
            selected_styles.append(last_style)
            print(f"Chatbot: Added “{last_style}” to your chosen styles:", selected_styles)
            print(f"""You can always type "proceed" to filter out your closet if you are satisfied with your style selection!""")
            continue
    last_style = user_input
    response = style_first(user_input)
    print("Chatbot: ", response)

    if user_input.lower() == "proceed":
        style_reccommender(file_contents, selected_styles)
        break




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#Part 1.A

import openai
client = openai.OpenAI(
    api_key="[IT'S OVER]")

prompt = "You're the best styling asistant around town! Please help me discover my personal style"

#prompt allows for fashion style identification and advice
chatbot_prompt = ("You are an eccentric stylist-assistant named Chatbot. You love being creative" 
    "and referring to online sources to give insightful style advice."
    "you will read through all the given keywords and format them (jump to the next line if the word is cut): [Acubi, Afro-punk, Afro-retro, All-American, Alpine, Alt Fashion, Antique, Aristocrat, Art Deco, Art Nouveau, Athleisure, Avant-garde, Aztec, Baddie, Balletcore, Barbiecore, Beach Bum, Beatnik, Biker, Black Loli, Bohemian/Boho, Bollywood, Bon chic, bon genre, Bubble Goth, Business Casual, California, Casual, Chic, Classic, Coastal Cowgirl, Coastal Grandmother, Coquette, Cosplay, Cottagecore, Country, Country Club, Cowboy/Western, Creepy Cute, Dark Academia, Dasakawa, Decora, Dieselpunk, Eclectic, Edgy, E-Girl/Boy, Emo, English, Ero-Kawaii, Equestrian, Formal, Furry, Futuristic, Gamine, Gangster, Geek chic, Glam Rock, Glamour, Goth, Gothic Lolita, Gorpcore, Grunge, Gyaru, Hadeko, Hairband, Harajuku, Heavy Metal, Hip-hop, Hippie, Hipster, House, Ivy League, Kampala Blend, Kawaii, Kodona/Ouji/Boystyle, Kowa-Kawaii, Ladylike, Light Academia, Lolita, Lunarpunk, Macabre, Mad Max, Metalhead, Military, Minimal/Minimalist, Mod, Mori Girl, Nautical, Neo Goth, Neo-Edwardian, Neo-Y2K, New Romanticism, Normcore, NuGoth, Nymphet, Old Money, Peasant, Pinup, Phat, Pop, Pop Punk, Posh, Post-apocalyptic road warrior, Power Dressing, Prairie, Preppy/Collegiate, Psychedelic, Psychobilly, Punk, Rasta, Rave/Raver, Resort, Retro, Rock, Rockabilly, Romantic, Rustic, Safari, Sapeurs, Scandinavian Minimalist, Scene, Scrumbro, Seapunk, Ska, Skate/Skater, Skandi, Sloane Ranger, Soft Girl, Softboys, Solarpunk, Southwestern, Sporty, Steampunk, Street, Surf, Techno, Techwear, Tiki Goth, Tomboy, Traditional Ethnic Styles, Trendy, Tropical, Ulzzang, Urban, Utility, Vaporwave, Varsity, Vintage/Retro, Visual Kei, VSCO Girl/Boy, Weirdcore, Y2K, Zoot Suiters,] and ask for the client's fashion style. Do NOT share/display this list with the user"
    "the client can name any, but only ONE (at a time) of following aesthetics from the keywords and, you will have to look on the internet to generate a short description of each of the named styles. Do NOT accept multiple words (user: weirdcore, goth; your answer should be, please name 1 aesthetic at a time)"
    "Each time the user names a keyword and replies with yes, they can continue naming aesthetics as they see fit."
    "the short description should look like the following example: --> athleisure: combines athletic wear with casual pieces for a sporty yet comfortable look—think leggings, sports bras, sneakers, and hoodies."
    "You must only name and analyze aesthetics and styles explicitly listed as the keywords above when the user names them. Do not create or assume any fastion styles/aesthetic that isn’t in the keywords. Suggest a similar aesthetic in the keywords if the aesthetic the user names is not in the keywords."
    "Ask the user if the description and The styles matches their aesthetic by saying Does this aesthetic match with your preferences?(ONLY THIS QUESTION)" 
    "If the user has no idea what their aesthetic is, ask them what they like to wear by asking: What do you wear on a daily basis? (ONLY THIS QUESTION) and match the user's description with your descriptions of any given aesthetic (like: comfortable joggers, and loose zipped up sweaters, running shoes --> athleisure). Then describe the aesthetic you think is associated with the users' words"
    "Let them respond with yes or no after proposing the style" 
                     )
def style_first(prompt):
    response = client.chat.completions.create(
        model="gpt-4.1",
        temperature= 1.0,
        messages=[
            {"role": "system", "content": chatbot_prompt},
            {"role": "user", "content": prompt }
        ]
    )
    return response.choices[0].message.content.strip()
print("Chatbot: ", style_first(prompt))

lst_aesthetics = [
    "Acubi", "Afro-punk", "Afro-retro", "All-American", "Alpine", "Alt Fashion", "Antique", "Aristocrat", "Art Deco", "Art Nouveau", 
    "Athleisure", "Avant-garde", "Aztec", "Baddie", "Balletcore", "Barbiecore", "Beach Bum", "Beatnik", "Biker", "Black Loli", 
    "Bohemian/Boho", "Bollywood", "Bon chic, bon genre", "Bubble Goth", "Business Casual", "California", "Casual", "Chic", "Classic", 
    "Coastal Cowgirl", "Coastal Grandmother", "Coquette", "Cosplay", "Cottagecore", "Country", "Country Club", "Cowboy/Western", 
    "Creepy Cute", "Dark Academia", "Dasakawa", "Decora", "Dieselpunk", "Eclectic", "Edgy", "E-Girl/Boy", "Emo", "English", 
    "Ero-Kawaii", "Equestrian", "Formal", "Furry", "Futuristic", "Gamine", "Gangster", "Geek chic", "Glam Rock", "Glamour", "Goth", 
    "Gothic Lolita", "Gorpcore", "Grunge", "Gyaru", "Hadeko", "Hairband", "Harajuku", "Heavy Metal", "Hip-hop", "Hippie", "Hipster", 
    "House", "Ivy League", "Kampala Blend", "Kawaii", "Kodona/Ouji/Boystyle", "Kowa-Kawaii", "Ladylike", "Light Academia", "Lolita", 
    "Lunarpunk", "Macabre", "Mad Max", "Metalhead", "Military", "Minimal/Minimalist", "Mod", "Mori Girl", "Nautical", "Neo Goth", 
    "Neo-Edwardian", "Neo-Y2K", "New Romanticism", "Normcore", "NuGoth", "Nymphet", "Old Money", "Peasant", "Pinup", "Phat", "Pop", 
    "Pop Punk", "Posh", "Post-apocalyptic road warrior", "Power Dressing", "Prairie", "Preppy/Collegiate", "Psychedelic", 
    "Psychobilly", "Punk", "Rasta", "Rave/Raver", "Resort", "Retro", "Rock", "Rockabilly", "Romantic", "Rustic", "Safari", "Sapeurs", 
    "Scandinavian Minimalist", "Scene", "Scrumbro", "Seapunk", "Ska", "Skate/Skater", "Skandi", "Sloane Ranger", "Soft Girl", 
    "Softboys", "Solarpunk", "Southwestern", "Sporty", "Steampunk", "Street", "Surf", "Techno", "Techwear", "Tiki Goth", "Tomboy", 
    "Traditional Ethnic Styles", "Trendy", "Tropical", "Ulzzang", "Urban", "Utility", "Vaporwave", "Varsity", "Vintage/Retro", 
    "Visual Kei", "VSCO Girl/Boy", "Weirdcore", "Y2K", "Zoot Suiters"
]
selected_styles = []
last_style = None

print(lst_aesthetics)

while True:
    user_input = input("You: ")
    if user_input.lower() == "yes":
        if last_style:
            selected_styles.append(last_style)
            print(f"Chatbot: Added “{last_style}” to your chosen styles:", selected_styles)
            print(f"""You can always type "proceed" to filter out your closet if you are satisfied with your style selection!""")
            continue
    if user_input.lower() == "proceed":
        pass
    last_style = user_input
    response = style_first(user_input)
    print("Chatbot: ", response)
        #part 2
    # if user_input.lower() in ["quit", "exit", "bye"]:



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import openai

infile2 = open(r'fashion_styles.txt','r')
file_contents2 = infile2.read()
infile2.close()
infile = open(r'compiled_closet.txt', 'r')
file_contents = infile.read()
infile.close()

chatbot_prompt = ("You are an eccentric stylist-assistant named Chatbot. You love being creative" 
    "and referring to online sources to give insightful style advice."
    "you will read through all the given keywords and format them (jump to the next line if the word is cut): [Acubi, Afro-punk, Afro-retro, All-American, Alpine, Alt Fashion, Antique, Aristocrat, Art Deco, Art Nouveau, Athleisure, Avant-garde, Aztec, Baddie, Balletcore, Barbiecore, Beach Bum, Beatnik, Biker, Black Loli, Bohemian/Boho, Bollywood, Bon chic, bon genre, Bubble Goth, Business Casual, California, Casual, Chic, Classic, Coastal Cowgirl, Coastal Grandmother, Coquette, Cosplay, Cottagecore, Country, Country Club, Cowboy/Western, Creepy Cute, Dark Academia, Dasakawa, Decora, Dieselpunk, Eclectic, Edgy, E-Girl/Boy, Emo, English, Ero-Kawaii, Equestrian, Formal, Furry, Futuristic, Gamine, Gangster, Geek chic, Glam Rock, Glamour, Goth, Gothic Lolita, Gorpcore, Grunge, Gyaru, Hadeko, Hairband, Harajuku, Heavy Metal, Hip-hop, Hippie, Hipster, House, Ivy League, Kampala Blend, Kawaii, Kodona/Ouji/Boystyle, Kowa-Kawaii, Ladylike, Light Academia, Lolita, Lunarpunk, Macabre, Mad Max, Metalhead, Military, Minimal/Minimalist, Mod, Mori Girl, Nautical, Neo Goth, Neo-Edwardian, Neo-Y2K, New Romanticism, Normcore, NuGoth, Nymphet, Old Money, Peasant, Pinup, Phat, Pop, Pop Punk, Posh, Post-apocalyptic road warrior, Power Dressing, Prairie, Preppy/Collegiate, Psychedelic, Psychobilly, Punk, Rasta, Rave/Raver, Resort, Retro, Rock, Rockabilly, Romantic, Rustic, Safari, Sapeurs, Scandinavian Minimalist, Scene, Scrumbro, Seapunk, Ska, Skate/Skater, Skandi, Sloane Ranger, Soft Girl, Softboys, Solarpunk, Southwestern, Sporty, Steampunk, Street, Surf, Techno, Techwear, Tiki Goth, Tomboy, Traditional Ethnic Styles, Trendy, Tropical, Ulzzang, Urban, Utility, Vaporwave, Varsity, Vintage/Retro, Visual Kei, VSCO Girl/Boy, Weirdcore, Y2K, Zoot Suiters,] and ask for the client's fashion style."
    "the client can name any and more than one of following aesthetics from the keywords and, you will have to look on the internet to generate a short description of each of the named styles."
    "the short description should look like the following example: --> Athleisure: Combines athletic wear with casual pieces for a sporty yet comfortable look—think leggings, sports bras, sneakers, and hoodies."
    "You must only name and analyze aesthetics and styles explicitly listed as the keywords above when the user names them. Do not create or assume any fastion styles/aesthetic that isn’t in the keywords. Suggest a similar aesthetic in the keywords if the aesthetic the user names is not in the keywords."
    "Ask the user if the description and The styles match their aesthetic."
                     )
chatbot_prompt2 = (  "You must only use clothing items explicitly listed in compiled_closet.txt when suggesting outfits. Do not create or assume any clothing that isn’t in the file."
    "Then, you will suggest 5 different outfits with the compiled_closet.txt file by having at least 1 piece of clothing in the following categories: top, bottom, accessory, layering, socks & shoes. You will also make a quick summary of the fashion style/aesthetic that the user names"
    "At the end of your text, ask if the client if satisfied with your request, by asking: are you satisfied with your new outfits? If the client sounds happy (by replying, yes, I'm satisfied, and other positive responses), ask the client if they would like to stock the outfit recommendation in a .txt file, seperating each outfit by <<//>>. If they would like to save the outfit, create that .txt file in a folder called <<outfits>>"
    "If the client sounds unsatisfied and disappointed(by replying, no, I'm disappointed, and other negative responses) by your outfit reccommendations, don't panic, and ask them which outfit(s) the client would like to generate again. You will provide the following choices, <<#1>>, <<#2>>, <<#3>>, <<#4>>, <<#5>>, <<all>>."
    "If the user writes <<#1>>, generate outfit <<#1>> again."
    "If the user writes <<#2>>, generate outfit <<#2>> again."
    "If the user writes <<#3>>, generate outfit <<#3>> again."
    "If the user writes <<#4>>, generate outfit <<#4>> again."
    "If the user writes <<#5>>, generate outfit <<#5>> again."
    "If the user writes <<all>>, generate all the outfits again.")

client = openai.OpenAI(
    api_key="hahaaahahaha insert key plz"

def STYLE_PROP():
    chatbot_prompt
        
def style_first(prompt):
    response = client.chat.completions.create(
        model="gpt-4.1",
        messages=[
            {"role": "system", "content": chatbot_prompt},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content.strip()

def style_second(prompt):
    response = client.chat.completions.create(
        model="gpt-4.1",
        messages=[
            {"role": "system", "content": chatbot_prompt2},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content.strip()
    
# Automatically send the file contents as the initial prompt
prompt = "Hello I want to know more about my fashion style! I have many clothes I'd like to know more how to style."

print("Chatbot: ", style_first(prompt))

# Then allow further conversation
while True:
    user_input = input("You: ")
    if user_input.lower() in ["quit", "exit", "bye"]:
        print("Chatbot: Goodbye! See you later!")
        break
#NEEDS TO BE FOR THE STYLE_FRIST PART
    if user_input.lower() == "yes":
        style_second(prompt)
        #PROCEED WITH THE SAMPLE_FOR_LATER 
    elif user_input.lower() == "no":
        print("Let's try again!")
        STYLE_PROP(file_contents2)
    else:
        print("Please input yes or no")
    response = style_first(user_input)
    print("Chatbot: ", response)
