# %%
from langchain.chat_models import ChatOpenAI

# Initialize ChatOpenAI with your API key and desired model.
llm = ChatOpenAI(
    openai_api_key="", 
    
    model_name="gpt-4.1",      
    temperature=0.5                 
)
# This API key will be revoked soon
# Use the invoke method to get a response.
response = llm.invoke("Hello, who are you?").content
print(response)




import base64
import openai
# don't forget to pu the api key
openai.api_key = ""
# put the text image in this
virtualCloset = [
    r'C:\Users\cngue\OneDrive\Documents\Fakebureau\Fashion\téléchargement.jpg',
    r'C:\Users\cngue\OneDrive\Documents\Fakebureau\Fashion\Fashion-Jackson-Wearing-Spring-Workwear-Outfit-Black-Theory-Tshirt-MAYSON-Black-Wide-Leg-Trousers-Black-Strapy-Sandals-Black-Bottega-Veneta-Teen-Jodie-Khaite-Black-Benny-Handbag-Street-Style.jpg'

]

binaryFileNameLst = []
analyzedClotheLst = []

def image_encoded():
    fileCount = 0
    
    for imgPath in virtualCloset:
        fileCount += 1

        with open(imgPath, "rb") as img_file:
            encoded_string = base64.b64encode(img_file.read()).decode("utf-8")

        binaryFileName = f"clothe {fileCount}.b64.txt"
        binaryFileNameLst.append(binaryFileName)

        with open(binaryFileName, "w", encoding="utf-8") as output_file:
            output_file.write(encoded_string)
            print(f"Image {fileCount} is added to virtual closet file")

    print("Images successfully saved to your virtual closet.")

def ai_ageant_cloth_analyse():
    index = 0
    for binaryPath in binaryFileNameLst:
        index += 1
        with open(binaryPath, "r", encoding="utf-8") as analyse_file:
            content = analyse_file.read()

        print(f"\n analyzing image {index} from {binaryPath}...\n")

        response = openai.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": """
                                You are a fashion expert. Analyze EACH clothing piece and accessory in the image using the following criteria:
                                            
                                - use ONE tag to identifies item using fallowing categories: Everyday Wear, Work, Formal Event, Casual Outing, Night Out, Special Occasion, Home / Lounge, Travel,
                                                        Outdoor Activities, Fitness / Workout, Beach / Pool, Date, Party, School / Campus, Errands, Formal, Semi-Formal, Business, Smart 
                                                        Casual, Casual, Relaxed Fit, Dressy, Trendy, Classic, Minimalist, Comfort First, Statement Piece, Layering Item, Timeless Basic, 
                                                        Athleisure, All Seasons, Summer, Winter, Spring, Fall, Rainy Weather, Cold Weather, Hot Weather, Windy Days, Transitional Weather, 
                                                        Snow-Ready, Sun-Friendly, Humidity Approved, Chilly Mornings, Comfortable, Breathable, Stretchy, Lightweight, Heavyweight, 
                                                        Quick-Dry, Durable.
                                - Assign the item to one of those types: Top, Bottom, Dress, One-Piece, Outerwear, Footwear, Accessorie
                                - Identify the one main color

                                Format your reply like:
                                [item description, color, tag, type] 
                                no need to numerote it 
                                and don't do greeting just the data
                                """
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{content}"
                            }
                        }
                    ]
                }
            ],
        )

        result = response.choices[0].message.content

        analyzedClotheName = f"analyzed clothe{index}.txt"
        analyzedClotheLst.append(analyzedClotheName)
        with open(analyzedClotheName,"w") as virtualCloset:
            virtualCloset.write(result)

def clothe_data_management():  
    virtualCloset = {}  
    for analyzedcloth in analyzedClotheLst:
        with open(analyzedcloth, "r" ) as infile: 
            analyzedClothesLines = infile.readlines()
            for line in analyzedClothesLines:
                pieceClothinglst = line.strip(" "+"\n").split(",")
                pieceName = pieceClothinglst[0]
                criterionlst = pieceClothinglst[1:]
                virtualCloset.update({pieceName: criterionlst})
    with open("vituralClosetDic.txt","w") as virtualclosetdict:
        virtualclosetdict.write(str(virtualCloset).strip("'"))
    return(virtualCloset)
                    
image_encoded()                
ai_ageant_cloth_analyse()
clothe_data_management()

# This function uses the dictionary with all the clothes described by tags
# that is output by Leijie's code and finds the ones that are suitable for
# the given situation. It only outputs the names of the suitable clothing,
# which are the keys in the dictionary


text = input('Describe your event.') # This is the input where the user describes their event
def event_planner():
    dictionary = clothe_data_management() # This is the dictionary created by Leijie's code
    prompt = f""" You are a stylist who takes in clients to whom you recommend clothing based
    on the situational context the client gives you, the weather at the location on a precise date
    which you will aquire yourself. For exemple, if the client needs an
    outfit recommendation for a gala held in a garden on x date x location, you would have to take 
    into consideration the weather on x date at x location because the event is outside (Contrarily 
    to see if the event was indoors). You will be picking out clothes from dictionary that contains
    pieces of clothing and accessories as keys and a list of tags that describe the clothing as values.
    The first tag of each list of tags will always be one of these: Top, Bottom, Dress, One-Piece, 
    Outerwear, Footwear, Accessories. The output you give must always have at least one item 
    that matches one of these tags. The rest of the tags in the list describe the style of the item
    as well as the weather, it can be worn in; use these to see which items correspond with your given
    situation. You will have to output the keys of all the items in this dictionary. Your output will only
    be all the keys in this dictionary that match the client's request and situation, separated by \n, no
    extra text
    The dictionary: {dictionary}
    Client request: {text}
    your reply"""
    response = llm.invoke(prompt).content
    return(response)
event_planner()


# This function saves the output of clothing items from event_planner in a file

def file_maker():
    clothing = f'{event_planner()}'
    chanelle = open('EventF.txt', 'w')
    chanelle.write(f'{clothing2}\n')
    print(f'{clothing}')
    chanelle.close()

file_maker()


